#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const svgo = require('svgo');
const yargs = require('yargs');
const { hideBin } = require('yargs/helpers');

const argv = yargs(hideBin(process.argv))
  .demandCommand(1, 'You need to pass at least one file')
  .option('update', {
    alias: 'u',
    type: 'boolean',
    description: 'Run with updating svg'
  })
  .argv;

const exitWithError = (...args) => {
  console.log(...args);
  process.exit(1);
}

const isDirectory = (filePath) => {
  try {
    const stats = fs.statSync(filePath);

    return stats.isDirectory();
  } catch (e) {
    exitWithError('Cannot read file or dir', filePath);
  }
}

(async () => {
  const config = await svgo.loadConfig();
  const errors = [];

  const svgProcessor = (svgPath) => {
    if(path.extname(svgPath) !== '.svg') return;

    const svgString = fs.readFileSync(svgPath, 'utf-8');
    const { data } = svgo.optimize(svgString, config);

    if (svgString != data) {
      if (argv.update) {
        fs.writeFileSync(svgPath, data)
        console.log('icon ', svgPath, ' has been updated');
      } else {
        errors.push(`${svgPath}' is not compatible with project requirements.`);
      }
    }
  }

  argv._.forEach(f => {
    const filePath = path.join(process.cwd(), f);

    
    if (isDirectory(filePath)) {
      fs.readdirSync(filePath).forEach(p => svgProcessor(path.join(filePath, p)));
    } else {
      svgProcessor(filePath);
    }
  });

  if (!argv.update && errors.length) {
    errors.push('\nrun "bin/svgo -u sharedProjects/Icons/src" to fix all arrors');
    exitWithError(errors.join('\n'));
  }
})();
